# pass a basic double component layout through vs->fs.

[require]
GLSL >= 1.40
GL_ARB_enhanced_layouts
GL_ARB_separate_shader_objects
GL_ARB_gpu_shader_fp64

[vertex shader]
#version 140
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require
#extension GL_ARB_gpu_shader_fp64: require

layout(location = 0) flat out dvec3 d1;
layout(location = 1, component = 2) flat out double d2;
layout(location = 2, component = 0) flat out double d3;
layout(location = 2, component = 2) flat out double d4;

in vec4 piglit_vertex;

void main()
{
  gl_Position = piglit_vertex;

  d1 = dvec3(1.0, 0.0, 1.0);
  d2 = 0.25LF;
  d3 = 0.50LF;
  d4 = 0.75LF;
}

[fragment shader]
#version 140
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require
#extension GL_ARB_gpu_shader_fp64: require

layout(location = 0) flat in dvec3 d1;
layout(location = 1, component = 2) flat in double d2;
layout(location = 2, component = 0) flat in double d3;
layout(location = 2, component = 2) flat in double d4;

out vec4 color;

void main()
{
  color = vec4(1.0, 0.0, 1.0, 1.0);

  if (dvec3(1.0, 0.0, 1.0) != d1 || 0.25LF != d2 ||
      0.50LF != d3 || 0.75LF != d4)
  {
    color = vec4(0.0, 1.0, 1.0, 1.0);
  }
}

[test]
clear color 0.1 0.1 0.1 0.1
clear
draw rect -1 -1 2 2
probe all rgba 1.0 0.0 1.0 1.0
